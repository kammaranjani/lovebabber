M-1:
int findminv(vector<int>&dist,int n,vector<bool>&vis){
            int minv=-1;
            for(int i=0;i<n;i++){
                if(!vis[i]&&(minv==-1||dist[i]<dist[minv])){
                    minv = i;
                }
            }
            return minv;
        }
        int finddis(vector<vector<int>>&adj, int n, vector<int>dist, vector<bool>&vis, int src, int dest){
            dist[src]=0;
            for(int j=0;j<n-1;j++){
            int minv=findminv(dist,n,vis);
            vis[minv]=1;
            for(int i=0;i<n;i++){
                if(adj[minv][i]!=INT_MAX){
                    if(dist[minv]!=INT_MAX&&dist[minv]+adj[minv][i]<dist[i]){
                        dist[i]=dist[minv]+adj[minv][i];
                    }
                }
            }
            }
            return dist[dest];
        }
        int minimumEdgeReversal(vector<vector<int>> &edges,int n,int src,int dst)
        {
            vector<vector<int>>adj(n+1,vector<int>(n+1,INT_MAX));
         for(int i=0;i<edges.size();i++){
             adj[edges[i][0]][edges[i][1]]=0;
             adj[edges[i][1]][edges[i][0]]=min(adj[edges[i][1]][edges[i][0]],1);
         }
         vector<int>dist(n+1,INT_MAX);
         vector<bool>vis(n+1,0);
         int ans=finddis(adj,n+1,dist,vis,src,dst);
         return ans==INT_MAX?-1:ans;
        }
M-2: 0-1 bfs
  int finddis(vector<vector<int>>&adj, int n, vector<int>dist, vector<bool>&vis, int src, int dest){
            deque<int>q;
            dist[src]=0;
            q.push_front(src);
            while(q.size()){
            int minv = q.front();
            if(minv == dest){
                return dist[dest];
            }
            q.pop_front();
            for(int i=0;i<n;i++){
                if(adj[minv][i]!=INT_MAX){
                    if(dist[minv]!=INT_MAX&&dist[minv]+adj[minv][i]<dist[i]){
                        dist[i]=dist[minv]+adj[minv][i];
                        if(adj[minv][i]==0){
                            q.push_front(i);
                        } else {
                            q.push_back(i);
                        }
                    }
                }
            }
            }
            return dist[dest];
        }
        int minimumEdgeReversal(vector<vector<int>> &edges,int n,int src,int dst)
        {
            vector<vector<int>>adj(n+1,vector<int>(n+1,INT_MAX));
         for(int i=0;i<edges.size();i++){
             adj[edges[i][0]][edges[i][1]]=0;
             adj[edges[i][1]][edges[i][0]]=min(adj[edges[i][1]][edges[i][0]], 1);
         }
         vector<int>dist(n+1,INT_MAX);
         vector<bool>vis(n+1,0);
         int ans=finddis(adj,n+1,dist,vis,src,dst);
         return ans==INT_MAX?-1:ans;
        }
