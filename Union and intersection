Union:
unsorted: o(nlogn+mlogn),o(n+m)
    int doUnion(int a[], int n, int b[], int m)  {
        int res = 0;
        unordered_set<int>s;
        int min = (n<=m)?n:m;
        for(int i=0;i<min;i++){
            s.insert(a[i]);
            s.insert(b[i]);
        }
        for(int i=min;i<n;i++){
            s.insert(a[i]);
        }
        for(int i=min;i<m;i++){
            s.insert(b[i]);
        }
        return s.size();
    }
sorted: o(n),o(m)
#include <iostream>
#include <bits/stdc++.h>
using namespace std;
vector<int> unio(vector<int>a,int n, vector<int>b,int m) {
    vector<int> an;
    int i=0,j=0,k=0;
    while(i<n&&j<m) {
        if(a[i]<b[j]) {
            if(k!=0){
                if(an.back()!=a[i]) {
            an.push_back(a[i]);
            k++;
            } 
            }else if(k==0){
                an.push_back(a[i]);
                k++;
            }
            i++;
        }
        else if(a[i]==b[j]) {
            if(k!=0){
                if(an.back()!=a[i]){
            an.push_back(a[i]);
            k++;
            } 
            }else if(k==0){
                an.push_back(a[i]);
                k++;
            }
            i++;
            j++;
        } else {
            if(k!=0){
            if(an.back()!=b[j]) {
            an.push_back(b[j]);
            k++;
            }
            }else if(k==0){
                an.push_back(b[j]);
                k++;
            }
            j++;
        }
    }
    while(i<n ) {
        if(k!=0){
        if(an.back()!=a[i]){
        an.push_back(a[i]);
        k++;
        }
        }else {
            an.push_back(a[i]); 
            k++;
        }
        i++;
    }
    while(j<m) {
          if(k!=0){
        if(an.back()!=b[j]){
        an.push_back(b[j]);
        k++;
        } else {
            an.push_back(b[j]); 
            k++;
        }
        j++;
    }
    }
return an;
}

intersection:
unsorted:
vector<int> unio(vector<int>a,int n, vector<int>b,int m) {
    unordered_map<int,int> us;
    vector<int>ans;
    int i=0;
    for(int i=0;i<n;i++){
            us[a[i]]++;
    }
    for(int i=0;i<m;i++){
            us[b[i]]++;
    }
    for(auto i: us) {
        if(i.second>1){
            ans.push_back(i.first);
        } 
    }
return ans;
}
sorted: 
better: o(n*m),o(1)
#include <bits/stdc++.h> 
vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
{
	vector<int> ans;
 for(int i=0;i<n;i++){
	 for(int j=0;j<m;j++){
		 if(arr1[i]<arr2[j]){
	     break;
		 }
		 else if(arr1[i]==arr2[j]) {
			 ans.push_back(arr1[i]);
			 arr2[j]=INT_MIN;
			 break;
		 }
	 }
 }
	return ans;
}
best: o(min(n,m))
#include <bits/stdc++.h> 
vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
{
	vector<int> ans;
	int i=0,j=0;
	while(i<n&&j<m) {
		if(arr1[i]==arr2[j]) {
			ans.push_back(arr1[i]);
            i++;
			j++;
		}
		else if (arr1[i]<arr2[j]) {
			i++;
		} else {
			j++;
		}
	}
	return ans;
}
