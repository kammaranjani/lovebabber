basic:o(2n),o(2n)+o(n)(stack space)
#include<bits/stdc++.h>
long help(int ind, int buy, long *values, int n, vector<vector<long>> &dp){
    if(ind==n){
        return 0;
    }
    if(dp[ind][buy]!=-1)
    return dp[ind][buy];
    if(buy==0){
        dp[ind][buy] = max(values[ind]+help(ind+1,1,values,n,dp),help(ind+1,0,values,n,dp));
        return dp[ind][buy];
    } else {
        dp[ind][buy] = max(-values[ind]+help(ind+1,0,values,n,dp),help(ind+1,1,values,n,dp));
        return dp[ind][buy];
    }
   return -1;
}
long getMaximumProfit(long *values, int n)
{
    vector<vector<long>> dp(n, vector<long>(2,-1));
    return help(0,1,values,n,dp);
}
better:o(2n),o(2n)
long getMaximumProfit(long *values, int n)
{
    vector<vector<long>> dp(n+1, vector<long>(2,-1));
    dp[n][0]=0;
    dp[n][1]=0;
    for(int ind=n-1;ind>=0;ind--){
        dp[ind][0] = max(values[ind]+dp[ind+1][1],dp[ind+1][0]);
        dp[ind][1] = max(-values[ind]+dp[ind+1][0],dp[ind+1][1]);
    }
  return dp[0][1];
}
best:o(2n),o(1)
long getMaximumProfit(long *values, int n)
{
    vector<long>ahead(2,-1),cur(2,-1);
    ahead[0]=0;
    ahead[1]=0;
    for(int ind=n-1;ind>=0;ind--){
        cur[0] = max(values[ind]+ahead[1],ahead[0]);
        cur[1] = max(-values[ind]+ahead[0],ahead[1]);
        ahead=cur;
    }
  return ahead[1];
}
//you can use 4 variables instead of two vectrs as well;
