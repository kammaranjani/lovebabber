bruteforce-o(n^3), o(1)
  long long maxSubarraySum(int arr[], int n){
        long long ans=INT_MIN;
        for(int i=0;i<n;i++) {
            for(int j=i;j<n;j++){
                int s=0;
                for(int k=i;k<=j;k++){
                    s+=arr[k];
                }
                    ans = max(ans,s);
            }
        }
        return ans;
    }
better-o(n^2), o(1)
    long long maxSubarraySum(int arr[], int n){
        long long ans=INT_MIN;
        for(int i=0;i<n;i++) {
            long long s=0;
            for(int j=i;j<n;j++){
                    s+=arr[j];
                    ans = max(ans,s);
                }
        }
        return ans;
    }
best-o(n),o(1)
  long long maxSubarraySum(int arr[], int n){
        long long ans=INT_MIN,s=0;
        for(int i=0;i<n;i++) {
            if(s<0){
                s=0;
            }
            s+=arr[i];
            ans = max(ans,s);
        }
        return ans;
    }
