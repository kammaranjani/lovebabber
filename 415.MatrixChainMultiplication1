basic:o(n^3),o(n^2)+o(n)
int help(int i,int j, int arr[],vector<vector<int>>&dp){
    if(i==j){
        return 0;
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    int ans=INT_MAX;
    for(int k=i;k<j;k++){
        ans=min(ans,arr[i-1]*arr[k]*arr[j]+help(i,k,arr,dp)+help(k+1,j,arr,dp));
    }
    return dp[i][j]=ans;
}
    int matrixMultiplication(int N, int arr[])
    {
        vector<vector<int>>dp(N,vector<int>(N,-1));
        return help(1,N-1,arr,dp);
    }
better,best:o(n^3),o(n^2) (see striver's video)
    int matrixMultiplication(int N, int arr[])
    {
        vector<vector<int>>dp(N,vector<int>(N,0));
        for(int i=0;i<N;i++){
            dp[i][i]=0;
        }
        for(int i=N-1;i>=1;i--){
            for(int j=i+1;j<N;j++){
                int ans=INT_MAX;
                for(int k=i;k<j;k++){
                ans=min(ans,arr[i-1]*arr[k]*arr[j]+dp[i][k]+dp[k+1][j]);
                }
                dp[i][j]=ans;
            }
        }
        return dp[1][N-1];
    }
