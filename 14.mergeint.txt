METHOD 1:O(nlogn),O(1)
#include <iostream>
#include<climits>
#include<algorithm>
using namespace std;
struct interval{
    int s,e;
};
void help(interval a[],int n){
    if(n==0){
    return;
    }
    if(n==1){
        cout<<'['<<a[0].s<<','<<a[0].e<<']'<<" ";
        return;
    }
    int ind=0;
    for(int i=1;i<n;i++){
        if(a[ind].e>=a[i].s){
            a[ind].s=min(a[ind].s,a[i].s);
            a[ind].e=max(a[ind].e,a[i].e);
        }
        else{
            ind++;
            a[ind]=a[i];
        }
    }
    for(int i=0;i<=ind;i++){
    cout<<'['<<a[i].s<<','<<a[i].e<<']'<<" ";
}
}
int main() {
interval a[]={{6,8},{1,9},{2,4},{4,7}};
int n=sizeof(a)/sizeof(a[0]);
help(a,n);
return 0;
}
METHOD 2:O(nlogn),O(n)
#include <iostream>
#include<climits>
#include<algorithm>
#include<stack>
using namespace std;
struct interval{
    int s,e;
};
bool comp(interval a,interval b){
    return a.s<b.s;
}
void help(interval a[],int n){
    if(n==0){
    return;
    }
    if(n==1){
        cout<<'['<<a[0].s<<','<<a[0].e<<']'<<" ";
        return;
    }
    sort(a,a+n,comp);
    stack<interval>s;
    s.push(a[0]);
    for(int i=1;i<n;i++){
        interval in=s.top();
    if(s.top().e>=a[i].s){
    if(s.top().e<a[i].e){
        in.e=a[i].e;
        //cout<<in.s<<in.e<<endl;
        s.pop();
    s.push(in);
    }
    }
    else{
        s.push(a[i]);
    }
    }
    while(!s.empty()){
        interval to=s.top();
        cout<<to.s<<" "<<to.e<<" ";
        s.pop();
    }
}
Method 3:O(nlogn),O(1)//best
#include<bits/stdc++.h>
bool comp(vector<int>a, vector<int>b){
    return a[0]<b[0];
}
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
      vector<vector<int>>ans;
      sort(intervals.begin(),intervals.end(),comp);
      ans.push_back(intervals[0]);
      int i=1;
      while(i<intervals.size()){
          if(ans.back()[1]>=intervals[i][0]){
             ans.back()[1]=max([i][1],ans.back()[1]);
          }
        else{
          ans.push_back(intervals[i]);
        }
           i++;
          }
      return ans;
    }
};

int main() {
interval a[]={{1,3},{2,6},{8,10},{15,18}};
int n=sizeof(a)/sizeof(a[0]);
help(a,n);
return 0;
}