Best for mod things
basic:
 long long int help(string str, int s, int e) {
        if(s>e){
            return 0;
        }
        long long int ans = help(str,s+1,e)+help(str,s,e-1);
        if(str[s]==str[e]) {
            return 1+ans;
        }
        return ans-help(str,s+1,e-1);
    }
    long long int countPS(string str)
    {
       int n=str.size();
       return help(str,0,n-1);
    }
better: o(n^2),o(n^2)
    long long int countPS(string str)
    {
       int n=str.size();
       long long int m = 1e9+7;
       vector<vector<long long int>>dp(n,vector<long long int>(n,0));
       for(int i=0;i<n;i++){
           dp[i][i]=1;
       }
       int k=1;
       while(k<n){
       for(int i=0;i<n;i++){
           int j=i+k;
           if(j>=n)
           break;
           if(str[i]==str[j]){
               dp[i][j]=(dp[i][j-1]%m+(dp[i+1][j]+1)%m)%m;
           }
            else {
                dp[i][j]=((dp[i][j-1]+dp[i+1][j])%m-(dp[i+1][j-1]%m)+m)%m;
            }
        }
        k++;
       }
       return dp[0][n-1];
    }

