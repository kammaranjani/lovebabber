Method: Memoization O(n*k^2), o(n*k)  //pepcoding
  int help(int n, int k,vector<vector<int>>&dp){
        if(n==0||k==0)
        return 0;
        if(n==1)
        return k;
        if(dp[n][k]!=-1)
        return dp[n][k];
        int ans=INT_MAX;
        for(int i=1;i<=k;i++){
        ans=min(ans,max(help(n-1,i-1,dp),help(n,k-i,dp)));
        }
        return dp[n][k]=1+ans;
    }
    int eggDrop(int n, int k) 
    {
        vector<vector<int>>dp(n+1,vector<int>(k+1,-1));
        return help(n,k,dp);
    }
Method: DP o(n*k^2), o(n*k)
int eggDrop(int n, int k) 
    {
        vector<vector<int>>dp(n+1,vector<int>(k+1,0));
        for(int i=1;i<=n;i++){
            for(int j=1;j<=k;j++){
                if(i==1)
                dp[i][j]=j;
                else{
                    int ans=INT_MAX;
                    for(int x=1;x<=j;x++){
                      ans=min(ans,max(dp[i-1][x-1],dp[i][j-x]));  
                    }
                    dp[i][j]=1+ans;
                }
            }
        }
        return dp[n][k];
    }
Method: better DP o(n*k) or o(n*logk)(not sure), o(n*k)
int eggDrop(int n, int k) 
    {
        vector<vector<int>>dp(n+1,vector<int>(k+1,0));
        int x=0;
        while(dp[n][x]<k){
            x++;
            for(int i=1;i<=n;i++){
            dp[i][x]=1+dp[i][x-1]+dp[i-1][x-1];
        }
        }
        return x;
    }
Method: best DP(space optimized) o(n*logk), o(n)
 int eggDrop(int n, int k) 
    {
        vector<int>dp(n+1,0);
        int m=0;
        for(;dp[n]<k;m++){
            for(int i=n;i>0;i--){
            dp[i]+=1+dp[i-1];
        }
        }
        return m;
    }
    //see in gfg for last two methods //best
