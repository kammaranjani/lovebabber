basic:
  int help(string A, int i, int j,vector<vector<int>>dp) {
      if(i==j){
          return 1;
      }
      if(A[i]==A[j]&&i+1==j){
          return 2;
      }
      if(dp[i][j]!=-1){
          return dp[i][j];
      }
      if(A[i]==A[j]){
          return dp[i][j]=2+help(A,i+1,j-1,dp);
      }
      return dp[i][j]=max(help(A,i+1,j,dp),help(A,i,j-1,dp));
  }
    int longestPalinSubseq(string A) {
        int n=A.size();
        vector<vector<int>>dp(n,vector<int>(n,-1));
        return help(A,0,n-1,dp);
    }
best:o(n^2),o(n^2)
reverse s, ans find lcs between this, reversed string => gives answer
