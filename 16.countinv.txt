 METHOD 1:O(n^2),O(1)
 long long int inversionCount(long long arr[], long long N)
    {
        long long int c=0;
        for(long long i=0;i<N;i++){
            for(long long int j=i+1;j<N;j++){
                if(arr[i]>arr[j])
                c++;
            }
        }
     return c;
    }
 METHOD 2: O(nlogn),O(n)  //best apna college count inversions
    long long int merge(long long arr[],long long l,long long mid,long long r){
        long long int inv=0;
        long long n=mid-l+1;
        long long m=r-mid;  //r-(mid+1)+1=r-mid
        long long a[n];
        long long b[m];
        for(long long i=0;i<n;i++){
            a[i]=arr[l+i];
        }
        for(long long i=0;i<m;i++){
            b[i]=arr[mid+i+1];
        }
        long long k=l;
        long long i=0;
        long long j=0;
        while(i<n&&j<m){
            if(a[i]<=b[j]){
                arr[k]=a[i];
                i++;
                k++;
        }
        else{
            arr[k]=b[j];
            inv+=n-i;
            j++;
            k++;
        }
        }
        while(i<n){
            arr[k]=a[i];
            k++;
            i++;
        }
        while(j<m){
            arr[k]=b[j];
            j++;
            k++;
        }
        return inv;
    }
    long long int mergesort(long long arr[],long long l,long long r){
        long long int inv=0;
        if(l<r){
        long long mid=(l+r)/2;
        inv+=mergesort(arr,l,mid);
        inv+=mergesort(arr,mid+1,r);
        inv+=merge(arr,l,mid,r);
    }
    return inv;
    }
    long long int inversionCount(long long arr[], long long N)
    {
     long long int i=mergesort(arr,0,N-1);
     return i;
    }