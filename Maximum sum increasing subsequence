basic:
	int help(int prev,int i, int arr[], int n, vector<vector<int>>dp){
	    if(i==n){
	        return 0;
	    }
	    if(dp[prev+1][i]!=-1){
	        return dp[prev+1][i];
	    }
	    if(prev==-1||arr[prev]<arr[i]){
	        return dp[prev+1][i]=max(arr[i]+help(i,i+1,arr,n,dp),help(prev,i+1,arr,n,dp));
	    }
	    return dp[prev+1][i]=help(prev,i+1,arr,n,dp);
	}
	int maxSumIS(int arr[], int n)  
	{  
	    vector<vector<int>>dp(n, vector<int>(n,-1));
	    return help(-1,0,arr,n,dp);
	} 
Better:o(n^2),o(n^2)
	int maxSumIS(int arr[], int n)  
	{  
	    vector<vector<int>>dp(n+1, vector<int>(n+1,0));
	    for(int i=n-1;i>=0;i--){
	        for(int j=i-1;j>=-1;j--){
	    if(j==-1||arr[j]<arr[i]){
	       dp[i][j+1]=max(arr[i]+dp[i+1][i+1],dp[i+1][j+1]);
	    } else {
	        dp[i][j+1]=dp[i+1][j+1];
	    }
	        }
	    }
	    return dp[0][0];
	}  
Best:o(n^2),o(n)
	int maxSumIS(int arr[], int n)  
	{  
	    vector<int>cur(n+1,0),prev(n+1,0);
	    for(int i=n-1;i>=0;i--){
	        for(int j=i-1;j>=-1;j--){
	    if(j==-1||arr[j]<arr[i]){
	       cur[j+1]=max(arr[i]+prev[i+1],prev[j+1]);
	    } else {
	        cur[j+1]=prev[j+1];
	    }
	        }
	        prev=cur;
	    }
	    return prev[0];
	}  
best 2:o(n^2),o(n) 
	int maxSumIS(int arr[], int n)  
	{  
	    vector<int>dp(n,0);
	    for(int i=0;i<n;i++){
	        dp[i]=arr[i];
	    }
	    for(int i=1;i<n;i++){
	       for(int j=0;j<i;j++){
	           if(arr[j]<arr[i]){
	               dp[i]=max(dp[i],arr[i]+dp[j]);
	           }
	       }
	    }
	    int ans=0;
	    for(int i=0;i<n;i++){
	        ans=max(ans,dp[i]);
	    }
	    return ans;
	} 
print LIS:
	int maxSumIS(int arr[], int n)  
	{  
	    vector<int>dp(n,0),p(n,0);
	    for(int i=0;i<n;i++){
	        dp[i]=arr[i];
	        p[i]=i;
	    }
	    for(int i=1;i<n;i++){
	       for(int j=0;j<i;j++){
	           if(arr[j]<arr[i]&&((arr[i]+dp[j])>dp[i])){
	               dp[i]=arr[i]+dp[j];
	               p[i]=j;
	           } 
	       }
	    }
	    int ans=0,pi=-1;
	    for(int i=0;i<n;i++){
	        if(ans<dp[i]){
	        ans=dp[i];
	        pi=i;
	        }
	    }
	    cout<<pi<<" ";
	    do{
	        pi=p[pi];
	        cout<<pi<<" ";
	    } while(p[pi]!=pi);
	    return ans;
	}


