Method:Recursive (bruteforce) o(2^n*n)
generate all substrings and check palindrome or not from s to n
Method:Recursive, memoization o(n^2), o(n^2)
//traversing 2d array like sliding window 
//good(should see)
string longestPalindrome(string S){
        int n=S.size();
        vector<vector<int>>dp(S.size(),vector<int>(S.size(),0));
        int i=0;
        int k=0;
        int ans=1;
        int s=0,e=0;
        while(k<n){
            for(int i=0;i<n;i++){
                int j=i+k;
                if(i==j){
                    dp[i][j]=1;
                }else if(j-i==1){
                    if(S[j]==S[i]){
                        dp[i][j]=2;
                        if(ans<dp[i][j]){
                            ans=dp[i][j];
                            s=i;
                            e=j;
                        }
                    }
                }else{
                    if(S[i]==S[j]&&dp[i+1][j-1]==j-i-1){
                        dp[i][j]=2+dp[i+1][j-1];
                        if(ans<dp[i][j]){
                            ans=dp[i][j];
                            s=i;
                            e=j;
                        }
                    }
                }
            }
            k++;
        }
        return S.substr(s,ans);
    }
Method: o(n^2),o(1)
string longestPalindrome(string S){
        int n=S.size();
        if(n==0)
        return NULL;
        int k=0;
        int ans=1;
        int s=0,e=0;
        while(k<n){
            int i=k,j=k+1;
            int t=0;
            while(i>=0&&j<n&&S[i]==S[j]){
                t+=2;
                i--;
                j++;
            }
            if(t>ans){
                s=i+1;
                e=j-1;
                ans=t;
            }
            i=k-1,j=k+1;
            t=1;
            while(i>=0&&j<n&&S[i]==S[j]){
                t+=2;
                i--;
                j++;
            }
            if(t>ans){
                s=i+1;
                e=j-1;
                ans=t;
            }
            k++;
        }
        return S.substr(s,e-s+1);
    }
