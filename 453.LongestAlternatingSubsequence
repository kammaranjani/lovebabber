Method: Dp o(n^2), o(n)
int AlternatingaMaxLength(vector<int>&nums){
		    if(nums.size()==1)
		    return 1;
		    int n=nums.size();
		    vector<vector<int>>dp(n,vector<int>(2,1));
		    int ma=1;
		    for(int i=1;i<n;i++){
		        for(int j=0;j<i;j++){
		            if(nums[i]>nums[j]&&dp[i][0]<dp[j][1]+1)
		            dp[i][0]=dp[j][1]+1;
		            else if(nums[i]<nums[j]&&dp[i][1]<dp[j][0]+1)
		            dp[i][1]=dp[j][0]+1;
		        }
		        cout<<dp[i][0]<<" "<<dp[i][1]<<endl;
		        ma=max(ma,max(dp[i][0],dp[i][1]));
		    }
		    return ma;
        }
Method: iterative o(n),o(1)
	int AlternatingaMaxLength(vector<int>&nums){
		  int ma=1,mi=1;
		  for(int i=1;i<n;i++){
		      if(nums[i]>nums[i-1]){
		          ma=mi+1;
		      }
		      else if(nums[i]<nums[i-1])
		      mi=ma+1;
		  }
		  return max(ma,mi);
		}
basic:
  int help(int prev, vector<int>nums, int i, int n, bool isg) {
	        if(i==n){
	            return 0;
	        }
	        if((isg&&(prev==-1||nums[prev]<nums[i]))||(!isg&&(prev==-1||nums[prev]>nums[i]))) {
	            return 1+help(i,nums,i+1,n,!isg);
	        } else {
	            return help(prev,nums,i+1,n,isg);
	        }
	    }
		int AlternatingaMaxLength(vector<int>&nums){
		    int n= nums.size();
		     return help(-1,nums,0,n,0);
		}


    
