M-1:
void help(string input,int i, vector<string>&output, string &temp){
    if(input.size()==0){
        output.push_back(temp);
        return;
    }
    for(int i=0;i<input.size();i++){
    temp+=input[i];
    int sn= input.size();
     string inp = input.substr(0,i)+input.substr(i+1,sn-i);
    help(inp,i,output,temp);
    temp.pop_back();
    }
}
M-2:
    void per(string S, int i, int n, unordered_set<string> &ans) {
	        ans.insert(S);
	        for(int ind=i;ind<n;ind++){
	            swap(S[ind],S[i]);
	            per(S,i+1,n,ans);
	            swap(S[ind],S[i]);
	        }
	    }
		vector<string>find_permutation(string S)
		{   
		    int n=S.size();
		    string temp = "";
		    unordered_set<string>ans;
		    per(S,0,n,ans);
		    vector<string> an;
		    for(auto a:ans){
		        an.push_back(a);
		    }
		    sort(an.begin(),an.end());
		    return an;
		}
M-3:
void per(string S,vector<string> &ans) {
	        if(S.size()==1){
	            ans.push_back(S);
	            return;
	        }
	        per(S.substr(1),ans);
	        int si= ans.size();
	       // cout<<si<<endl;
	        if(si==1){
	            string temp = S[0]+ans[0];
	            ans.push_back(temp);
	            ans[0]=ans[0]+S[0];
	        } else {
	        for(int i=0;i<si;i++){
	            int sn=ans[i].size();
	            for(int j=1;j<=sn;j++){
	            string temp = ans[i].substr(0,j)+S[0]+ans[i].substr(j,sn-j);
	            ans.push_back(temp);
	            }
	        }
	        for(int i=0;i<si;i++){
	            int sn=ans[i].size();
	            string temp = S[0]+ans[i];
	            ans[i]=temp;
	        }
	        }
	    } 
