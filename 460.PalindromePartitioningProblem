Method: Recursion, memoization
int help(string str, int s, int n,vector<vector<int>>&dp){
    if(s>n)
    return 0;
    int f=0;
    if(dp[s][n]!=-1)
    return dp[s][n];
    for(int i=s,j=n;i<=j;i++,j--){
        if(str[i]!=str[j])
        f=1;
    }
    if(f==0)
    return dp[s][n]=1;
    int ans=INT_MAX;
    for(int i=s;i<n;i++){
        ans=min(ans,help(str,s,i,dp)+help(str,i+1,n,dp));
    }
    return dp[s][n]=ans;
}
    int palindromicPartition(string str)
    {
    vector<vector<int>>dp(str.size(),vector<int>(str.size(),-1));
        return help(str,0,str.size()-1,dp)-1;
    }
Method: DP
int palindromicPartition(string str)
    {
        int n=str.size();
    vector<vector<int>>dp(n,vector<int>(n,INT_MAX));
        for(int gap=0;gap<n;gap++){
            for(int i=0,j=i+gap;i<n-gap;i++,j++){
                if(i==j){
                    dp[i][j]=0;
                }
                else{
                if(palindrome(str,i,j)){
                    dp[i][j]=0;
                }
                else{
                    for(int k=i;k<j;k++){
                    dp[i][j]=min(dp[i][j],1+dp[i][k]+dp[k+1][j]);
                }
                }
                }
        }
        }
        return dp[0][n-1];
    }

another:
basic:
  bool isParPos(int i,int j, string s){
        for(int l=i,k=j;l<k;l++,k--){
            if(s[l]!=s[k]){
                return false;
            }
        }
        return true;
    }
    int help(int i, int n,string str,vector<int>&dp){
        if(i==n){
            return 0;
        }
        if(dp[i]!=-1)
        return dp[i];
        int ans=INT_MAX;
        for(int x=i;x<n;x++){
                if(isParPos(i,x,str)){
                    ans=min(ans,1+help(x+1,n,str,dp));
                }
        }
        return dp[i]=ans;
    }
    int palindromicPartition(string str)
    {
        int n=str.size();
        if(isParPos(0,n-1,str))
        return 0;
        vector<int>dp(n,-1);
    return help(0,n,str,dp)-1;
    }
for printing those strings we use backtracking see takeuForward(L17. Palindrome Partitioning | Leetcode | Recursion | C++ | Java)
