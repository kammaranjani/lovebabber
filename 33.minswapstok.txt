METHOD 1:O(n),O(1)  //best
#include<algorithm>
#include<climits>
int minSwap(int *arr, int n, int k) {
    // Complet the function
    int non=INT_MAX;
    int c=0;
    for(int i=0;i<n;i++){
        if(arr[i]<=k)
        c++;
    }
    if(c==0||c==n)
    return 0;
    int noni=0;
    for(int i=0;i<c;i++){
    if(arr[i]>k)
    noni++;
    }
    int l=0;
    int h=c-1;
    non=noni;
    while(h<n){
        noni=min(non,noni);
        h++;
        if(arr[h]>k)
        non++;
        if(arr[l]>k)
        non--;
        l++;
    }
    return noni;
}
better(O((n-k+1)*k),O(1)) // sliding window technique
    int minSwap(int arr[], int n, int k) {
      int no=0;
      for(int i=0;i<n;i++){
          if(arr[i]<=k){
              no++;
          }
      }
      int c=0;
      for(int i=0;i<=n-no;i++){
      int t=0;
      for(int l=i;l<i+no;l++){
          if(arr[l]<=k){
          t++;
          }
      }
      c=max(c,t);
    }
    return no-c;
    }
