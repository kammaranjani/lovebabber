METHOD 1:O(n),O(1)  //best
#include<algorithm>
#include<climits>
int minSwap(int *arr, int n, int k) {
    // Complet the function
    int non=INT_MAX;
    int c=0;
    for(int i=0;i<n;i++){
        if(arr[i]<=k)
        c++;
    }
    if(c==0||c==n)
    return 0;
     int non=0;
      for(int l=0;l<fav;l++){
          if(arr[l]>k){
          non++;
          }
      }
      int res=INT_MAX;
      int s=0,e=fav-1;
      res=min(non,res);
      while(e<n){
          e++;
          res=min(non,res);
          if(e<n&&arr[e]>k)
          non++;
          if(s<n&&arr[s]>k)
          non--;
          s++;
      }
    return (res==INT_MAX)?0:res;
    }
better(O((n-k+1)*k),O(1)) // sliding window technique
    int minSwap(int arr[], int n, int k) {
      int no=0;
      for(int i=0;i<n;i++){
          if(arr[i]<=k){
              no++;
          }
      }
      int c=0;
      for(int i=0;i<=n-no;i++){
      int t=0;
      for(int l=i;l<i+no;l++){
          if(arr[l]<=k){
          t++;
          }
      }
      c=max(c,t);
    }
    return no-c;
    }
