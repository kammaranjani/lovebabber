Basic:
 long long help(int n, int i, int arr[]) {
        if(n<i){
            return 0;
        }
        if(n==i){
            return arr[i];
        }
        int t=max(min(help(n-1,i+1,arr),help(n,i+2,arr))+arr[i],min(help(n-2,i,arr),help(n-1,i+1,arr))+arr[n]);
        return t;
    }
    long long maximumAmount(int n, int arr[]){
        return help(n-1,0,arr);
    }
best: o(n^2),o(n^2)
   long long maximumAmount(int n, int arr[]){
        vector<vector<int>>dp(n,vector<int>(n,0));
        for(int i=0;i<n;i++){
            dp[i][i]=arr[i];
        }
        int k=1;
        while(k<n) {
            for(int i=0;i<n-1;i++){
                int j=i+k;
                if(j<n){
                  int x = ((i + 2) <= j) ? dp[i + 2][j] : 0;
            int y = ((i + 1) <= (j - 1))
                        ? dp[i + 1][j - 1]
                        : 0;
            int z = (i <= (j - 2)) ? dp[i][j - 2] : 0;
 
            dp[i][j] = max(arr[i] + min(x, y),
                              arr[j] + min(y, z));
            }
        }
        k++;
        }
        return dp[0][n-1];
    }
