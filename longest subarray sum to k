bruteforce:o(n^3),o(1)
loop through all;
better:o(n^2),o(1)
for only whole numbers:
best:o(n),o(1)
int longestSubarrayWithSumK(vector<int> a, long long k) {
    int len=0,i=0,j=0,n=a.size(),t=0;
    t+=a[0];
    while(i<n){
    if(t==k){
       len = max(len,i-j+1);
       i++;
       t+=a[i];
    }
    else if(t<k){
        i++;
        t+=a[i];
    }
    else{
        while(t>k){
            t-=a[j];
            j++;
        }
    }
    }
    return len;
}
for integers:
best:o(n),o(n)
#include <bits/stdc++.h> 
int getLongestSubarray(vector<int>& nums, int k){
    unordered_map<int,int>um;
    int pf=0,len=0,n=nums.size();
    for(int i=0;i<n;i++){
      
        pf+=nums[i];
        if(pf==k){
            len = max(len,i+1);
        }
           int rem = pf-k;
        if(um.count(rem)){
            len = max(len,i-um[rem]);
        }
        if (!um.count(pf)) {
            um[pf] = i;
        }
    }
    return len;
}
