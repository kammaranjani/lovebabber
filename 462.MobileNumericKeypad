Method: recursive memoization o(n), o(n)
long long help(int mat[4][3],int n, int i, int j, int re, int ce, vector<vector<long long>>&dp){    
	    if(n==1)
	    return 1;
		if(dp[mat[i][j]][n]!=-1)
		return dp[mat[i][j]][n];
		long long ans=help(mat,n-1,i,j,re,ce,dp);
		long long a=0,b=0,c=0,d=0;
		if(!(i+1==re||mat[i+1][j]==-1))
		a=help(mat,n-1,i+1,j,re,ce,dp);
		if(!(j+1==ce||mat[i][j+1]==-1))
		b=help(mat,n-1,i,j+1,re,ce,dp);
		if(!(i-1<0||mat[i-1][j]==-1))
		c=help(mat,n-1,i-1,j,re,ce,dp);
		if(!(j-1<0||mat[i][j-1]==-1))
		d=help(mat,n-1,i,j-1,re,ce,dp);
		return dp[mat[i][j]][n]=ans+a+b+c+d;
	}
	long long getCount(int N)
	{
	    vector<vector<long long>>dp(10,vector<long long>(N+1,-1));
	    int mat[4][3]={{1,2,3},{4,5,6},{7,8,9},{-1,0,-1}};
	    long long a=0;
	    for(int i=0;i<4;i++){
	        for(int j=0;j<3;j++){
	            if(mat[i][j]!=-1)
		    a+=help(mat,N,i,j,4,3,dp);
	        }
		}
return a;
}
