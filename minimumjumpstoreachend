bruteforce: recursive
better: o(n^2),o(n)
   int minJumps(int arr[], int n){
        if(n==1)
        return 0;
        if(arr[0]==0)
        return -1;
        int a[n];
        for(int i=1;i<n;i++){
            a[i]=INT_MAX;
        }
        a[0]=0;
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(i<=j+arr[j]&&a[j]!=INT_MAX){
                a[i]=min(a[i],1+a[j]);
            }
        }
        }
        return a[n-1]==INT_MAX?-1:a[n-1];
    }
best: o(n),o(1)
    int minJumps(int arr[], int n){
        if(n==1)
        return 0;
        if(arr[0]==0)
        return -1;
        int maxr=arr[0],step=arr[0],jumps=1;
       for(int i=1;i<n;i++){
           if(i==n-1)
           return jumps;
           maxr=max(maxr,i+arr[i]);
           if(i>=maxr){
               return -1;
           }
           step--;
           if(step == 0){
               jumps++;
               step=maxr-i;
           }
       }
       return -1;
    }
