Method 1: if two sets don't need to have a difference of 1 element at max (bruteforce)
#include <bits/stdc++.h> 
using namespace std; 
void help(int *arr, int i, int n, vector<int>a1, vector<int>a2, int osum, int tsum, int &ans){
    if(i==n){
        ans=min(ans, abs(osum-tsum));
        return;
    }
    help(arr, i+1, n, a1,a2, osum+arr[i],tsum,ans);
    help(arr, i+1,n,a1, a2, osum, tsum+arr[i],ans);
}
void tugOfWar(int *arr, int n) 
{ 
vector<int>a1,a2;
int osum=0,tsum=0;
int ans= INT_MAX;
help(arr, 0, n, a1,a2, osum, tsum, ans);
cout<<ans<<endl;
} 

int main() 
{ 
	int arr[] = {3, 4, 5, -3, 100, 1, 89, 54, 23, 20}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	tugOfWar(arr, n); 
	return 0; 
} 
Method 2: good
#include <bits/stdc++.h> 
using namespace std; 
void help(int *arr, int i, int n, vector<int>&a1, vector<int>&a2, int osum, int tsum, int &ans, vector<int> &ta1, vector<int> &ta2){
    if(i==n){
        int del=abs(osum-tsum);
        if(ans>del){
            ans=del;
            ta1 = a1;
            ta2 = a2;
    }
        return;
    }
    if(a1.size()<(n+1)/2){
        a1.push_back(arr[i]);
    help(arr,i+1,n,a1, a2, osum+arr[i], tsum, ans, ta1, ta2);
       a1.pop_back();
    }
    if(a2.size()<(n+1)/2){
        a2.push_back(arr[i]);
    help(arr,i+1,n,a1, a2, osum, tsum+arr[i], ans, ta1, ta2);
       a2.pop_back();
    }
}
void tugOfWar(int *arr, int n) 
{ 
vector<int>a1,a2;
int osum=0,tsum=0;
int ans= INT_MAX;
vector<int>ta1,ta2;
help(arr, 0, n, a1,a2, osum, tsum, ans, ta1, ta2);
for(int k=0;k<ta1.size();k++){
    cout<<ta1[k]<<" ";
}
cout<<endl;
for(int k=0;k<ta2.size();k++){
    cout<<ta2[k]<<" ";
}
        cout<<endl;
} 
int main() 
{ 
	int arr[] ={23, 45, -34, 12, 0, 98, -99, 4, 189, -1, 4}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	tugOfWar(arr, n); 
	return 0; 
} 
