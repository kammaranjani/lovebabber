basic:
 int help(int i, int j,int n, int m, string s1, string s2,vector<vector<int>>&dp) {
        if(i==n||j==m){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        if(s1[i]==s2[j]){
            return dp[i][j]=1+help(i+1,j+1,n,m,s1,s2,dp);
        }
        return dp[i][j]=max(help(i+1,j,n,m,s1,s2,dp),help(i,j+1,n,m,s1,s2,dp));
    }
    int lcs(int n, int m, string s1, string s2)
    {
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return help(0,0,n,m,s1,s2,dp);
    }
better:o(n*m),o(n*m)
 int lcs(int n, int m, string s1, string s2)
    {
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int i=n-1;i>=0;i--){
            for(int j=m-1;j>=0;j--){
                if(i==n||j==m){
                    dp[i][j]=0;
                    continue;
                }
                 if(s1[i]==s2[j]){
                 dp[i][j]=1+dp[i+1][j+1];
        } else {
           dp[i][j]=max(dp[i+1][j],dp[i][j+1]);
            }
        }
        }
        return dp[0][0];
    }
best:o(n*m),o(m)
 int lcs(int n, int m, string s1, string s2)
    {
        vector<int>cur(m+1,0),prev(m+1,0);
        for(int i=n-1;i>=0;i--){
            for(int j=m-1;j>=0;j--){
                if(i==n||j==m){
                    cur[j]=0;
                    continue;
                }
                 if(s1[i]==s2[j]){
                 cur[j]=1+prev[j+1];
        } else {
           cur[j]=max(prev[j],cur[j+1]);
            }
        }
        prev=cur;
        }
        return cur[0];
    }
