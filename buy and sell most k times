basic:o(2
int help(int i, int t, vector<int>&prices, int n, int k,vector<vector<int>>&dp){
    if(i==n || t==k)
    return 0;
    if(dp[i][t]!=-1){
        return dp[i][t];
    }
    if(t%2){
        return dp[i][t]=max(prices[i]+help(i+1,t+1,prices,n,k,dp),help(i+1,t,prices,n,k,dp));
    } else {
        return dp[i][t]=max(-prices[i]+help(i+1,t+1,prices,n,k,dp),help(i+1,t,prices,n,k,dp));
    }
}
int maximumProfit(vector<int> &prices, int n, int k)
{
    vector<vector<int>>dp(n,vector<int>(2*k,-1));
    return help(0,0,prices,n,2*k,dp);
}
better:o(n*2*k),o(n*2*k)
int maximumProfit(vector<int> &prices, int n, int k)
{
    vector<vector<int>>dp(n+1,vector<int>(2*k+1,0));
    for(int i=n-1;i>=0;i--){
        for(int t=2*k-1;t>=0;t--){
    if(t%2){
        dp[i][t]=max(prices[i]+dp[i+1][t+1],dp[i+1][t]);
    } else {
        dp[i][t] = max(-prices[i] + dp[i + 1][t + 1],dp[i + 1][t]);
    }
        }
    }
    return dp[0][0];
}
best:o(n*2*k),o(2*k)
int maximumProfit(vector<int> &prices, int n, int k)
{
    vector<int>cur(2*k+1,0),ahead(2*k+1,0);
    for(int i=n-1;i>=0;i--){
        for(int t=2*k-1;t>=0;t--){
    if(t%2){
        cur[t]=max(prices[i]+cur[t+1],cur[t]);
    } else {
        cur[t] = max(-prices[i] + cur[t + 1],cur[t]);
    }
        }
        ahead = cur;
    }
    return cur[0];
}

