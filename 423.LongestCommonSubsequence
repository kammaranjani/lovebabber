Method: Recursive, memoization o(n^2),o(n^2)
int help(int s, int x, int e, int y, string &s1, string &s2,vector<vector<int>>&dp){
        if(s==x||e==y)
        return 0;
        if(dp[s][e]!=-1)
        return dp[s][e];
        if(s1[s]==s2[e]){
            return dp[s][e]= max(1+help(s+1,x,e+1,y,s1,s2,dp),max(help(s+1,x,e,y,s1,s2,dp),help(s,x,e+1,y,s1,s2,dp)));
        }
        return dp[s][e]=max(help(s+1,x,e,y,s1,s2,dp),help(s,x,e+1,y,s1,s2,dp));
    }
    int lcs(int x, int y, string s1, string s2)
    {
        vector<vector<int>>dp(x+1,vector<int>(y+1,-1));
        return help(0,x,0,y,s1,s2,dp);
    }
    Method: DP o(n^2), o(n^2)
     int lcs(int x, int y, string s1, string s2)
    {
        vector<vector<int>>dp(x+1,vector<int>(y+1,-1));
        for(int i=0;i<=x;i++){
            dp[i][0]=0;
        }
        for(int i=1;i<=y;i++){
            dp[0][i]=0;
        }
        for(int j=1;j<=y;j++){
        for(int i=1;i<=x;i++){
                if(s1[i-1]==s2[j-1]){
                    dp[i][j]=max(1+dp[i-1][j-1],max(dp[i-1][j],dp[i][j-1]));
                }
                else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[x][y];
    }
