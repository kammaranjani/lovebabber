bruteforce O(n),O(n):take two arrays copy positive elements into one array and negative elements into other and copy alternatively in input
Method 1:O(n),O(1) // order doesn't matter //best
void GFG :: rearrange(int arr[], int n)
{
	int i = -1;
	for (int j = 0; j < n; j++)  //like quick sort assuming pivot=0
	{
		if (arr[j] < 0)   
		{
			i++;
			swap(&arr[i], &arr[j]);
		}
	}
	int pos = i + 1, neg = 0;
	while (pos < n &&arr[neg] < 0)
	{
		swap(&arr[neg], &arr[pos]);
		pos++;
		neg += 2;
	}
}
//end
METHOD 1:O(n^2),O(1)
void rotate(int arr[],int s, int e){
    int t=arr[e];
    for(int i=e;i>s;i--){
        arr[i]=arr[i-1];
    }
    arr[s]=t;
}
void rearrange(int arr[], int n)
{
   int i=0,j=0,k=0;
   while(i<n&&j<n&&k<n){
   if(k%2==0){
       if(arr[k]>0){
           i=k;
           j=k;
           while(i<n&&arr[i]>=0)
           i++;
           if(i>=n){
           return;
           }
           rotate(arr,j,i);
       }
   }
   else{
       if(arr[k]<0){
           i=k;
           j=k;
           while(j<n&&arr[j]<0)
           j++;
           if(j>=n){
           return;
           }
           rotate(arr,i,j);
       }
   }
   k++;
}
}
void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}
int main()
{
    int arr[] = { -5, -2, 5, 2, 4, 7, 1, 8, 0, -8 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "Given array is \n";
    printArray(arr, n);
    rearrange(arr, n);
    cout << "Rearranged array is \n";
    printArray(arr, n);
    return 0;
}