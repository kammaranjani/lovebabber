basic:
   int help(int i, int n, int w, vector<int> cost,vector<vector<int>>dp){
         if(i==n){
             if(w==0)
         return 0;
         return INT_MAX;
         }
         if(w<0){
             return INT_MAX;
         }
         if(w==0)
         return 0;
         if(dp[i][w]!=INT_MAX)
         return dp[i][w];
         int ans=help(i+1,n,w,cost,dp);
         if(help(i,n,w-(i+1),cost,dp)!=INT_MAX&&cost[i]!=-1){
         ans=min(ans,help(i,n,w-(i+1),cost,dp)+cost[i]);
         }
         dp[i][w]=ans;
         return dp[i][w];
     }
    int minimumCost(int n, int w, vector<int> &cost) {
        vector<vector<int>>dp(n,vector<int>(w+1,INT_MAX));
        return help(0,n,w,cost,dp)==INT_MAX?-1:help(0,n,w,cost,dp);
    }
better:o(n*w),o(n*w) (can space optimize too
  int minimumCost(int n, int w, vector<int> &cost) {
        vector<vector<int>>dp(n+1,vector<int>(w+1,INT_MAX));
          for(int i=0;i<=n;i++){
                   dp[i][0]=0;
            
          }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=w;j++){
                int ans=dp[i-1][j];
                if((j-(i))>=0&&dp[i][j-i]!=INT_MAX&&cost[i-1]!=-1){
                ans=min(ans,dp[i][j-i]+cost[i-1]);
                }
                dp[i][j]=ans;
            }
        }
        return dp[n][w]==INT_MAX?-1:dp[n][w];
    }
best:o(n*w),o(w)
   int minimumCost(int n, int w, vector<int> &cost) {
        vector<int>cur(w+1,INT_MAX),pre(w+1,INT_MAX);
          for(int i=0;i<=n;i++){
                   cur[0]=0;
            
          }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=w;j++){
                int ans=pre[j];
                if((j-i)>=0&&cur[j-i]!=INT_MAX&&cost[i-1]!=-1){
                ans=min(ans,cur[j-i]+cost[i-1]);
                }
                cur[j]=ans;
            }
            pre=cur;
        }
        return pre[w]==INT_MAX?-1:pre[w];
    }

