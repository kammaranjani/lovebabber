Method:Memoization, recursive O(n^3),O(n^2)
#include<bits/stdc++.h>
int help(int* arr, int s, int e, vector<vector<int>> &dp){
    if(e-s==1||e==s)
    return 0;
    if(dp[s][e]!=-1)
    return dp[s][e];
    int ans=INT_MAX;
    for(int i=s+1;i<e;i++){
     ans=min(ans,help(arr,s, i,dp)+help(arr,i,e,dp)+(arr[s]*arr[i]*arr[e]));
    }
    dp[s][e]=ans;
    return ans;
}
int matrixChainMultiplication(int* arr, int n) {
    vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
    return help(arr,0,n,dp);
}
Method:DP O(n^3),O(n^2)
int matrixChainMultiplication(int* arr, int n) {
vector<vector<int>>dp(n+1,vector<int>(n+1,0));
   for(int i=n-2;i>=0;i--){
        for(int j=i+2;j<=n;j++){
                int ans=INT_MAX;
                for (int k = i + 1; k < j; k++) {
                  ans = min(ans,
                            dp[i][k] + dp[k][j] + (arr[i] * arr[k] * arr[j]));
                }
                dp[i][j] = ans;
        }
    }
    return dp[0][n];
}
