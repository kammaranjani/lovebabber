BruteForce:o(3n),o(2n)
int maxProfit(vector<int>& prices) {
        int p=0,n=prices.size();
        int a[n],b[n];
        for(int i=0;i<n;i++){
        if(i==0){
            a[i]=prices[i];
        } else{
            a[i] = min(a[i-1],prices[i]);
        }
    }
      for(int i=n-1;i>=0;i--){
        if(i==n-1){
            b[i]=prices[i];
        } else{
            b[i] = max(b[i+1],prices[i]);
        }
    }
    for(int i=0;i<n;i++){
        p=max(p,b[i]-a[i]);
    }
    return p;
    }
best:o(n),o(1)
 int maxProfit(vector<int>& prices) {
    int p=0,n=prices.size(),mini=prices[0];
    for(int i=1;i<n;i++){
        p=max(p,prices[i]-mini);
        mini=min(mini,prices[i]);
    }
    return p;
    }
