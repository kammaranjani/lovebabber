Method: memoization
int help(int i,int j,int n, vector<vector<int>> Matrix,vector<vector<int>>&dp){
        if(i<0||j<0||i>=n||j>=n)
        return 0;
        if(dp[i][j]!=-1)
        return dp[i][j];
        return dp[i][j]=Matrix[i][j]+max(help(i+1,j,n,Matrix,dp),max(help(i+1,j-1,n,Matrix,dp), help(i+1,j+1,n,Matrix,dp)));
    }
    int maximumPath(int N, vector<vector<int>> Matrix)
    {
        int ans=0;
        vector<vector<int>>dp(N+1,vector<int>(N+1,-1));
        for(int i=0;i<N;i++){
        ans=max(ans,help(0,i,N,Matrix,dp));
        }
        return ans;
    }
Method: DP O(n^2), O(n^2)
int help(int i,int j,int n, vector<vector<int>> Matrix,vector<vector<int>>&dp){
        if(i<0||j<0||i>=n||j>=n)
        return 0;
        if(dp[i][j]!=-1)
        return dp[i][j];
        return dp[i][j]=Matrix[i][j]+max(help(i+1,j,n,Matrix,dp),max(help(i+1,j-1,n,Matrix,dp), help(i+1,j+1,n,Matrix,dp)));
    }
    int maximumPath(int N, vector<vector<int>> Matrix)
    {
        int ans=0;
        vector<vector<int>>dp(N+1,vector<int>(N+1,0));
        for(int i=1;i<=N;i++){
        for(int j=1;j<=N;j++){
            if(j==N){
                dp[i][j]=Matrix[i-1][j-1]+max(dp[i-1][j-1],dp[i-1][j]);
            }
            else{
            dp[i][j]=Matrix[i-1][j-1]+max(dp[i-1][j-1],max(dp[i-1][j+1],dp[i-1][j]));
            }
        if(i==N)
        ans=max(ans,dp[i][j]);
        }
        }
        return ans;
    }
