Recursive:
  int help(int A[], int s, int n){
        if(s>=n-1)
        return 0;
        if(s+A[s]==s)
        return 10000000;
        int ans=10000000;
        for(int i=s+1;i<=s+A[s];i++){
        ans=min(ans,1+help(A,i,n));
        }
        return ans;
    }
    int canReach(int A[], int N) {
        return help(A,0,N)>=10000000?0:1;
    }
Method:DP O(n^2), O(n)
    int canReach(int A[], int N) {
        vector<int>dp(N,0);
        int i=0;
        dp[0]=1;
        while(i<N){
                if(dp[i]==0)
         return 0;
            if(i+A[i]>i){
        for(int j=i+1;j<=min(i+A[i],N-1);j++){
            dp[j]=1;
        }
            }
            i++;
        }
        return dp[N-1];
    }
Method: o(n), o(1)
 if(N<=1)
        return 1;
        int jumps=1;
        int mr=A[0];
        int st=A[0];
        for(int i=1;i<N;i++){
            if(i==N-1)
            return 1;
            st--;
            mr=max(mr,i+A[i]);
            if(st==0){
                jumps++;
                if(i>=mr)
                return 0;
            st=mr-i;
            }
        }
