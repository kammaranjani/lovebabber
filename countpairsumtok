unsorted:
brute-force:o(n^2),o(1)
  int getPairsCount(int arr[], int n, int k) {
        int ans =0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(arr[i]+arr[j]==k){
                    ans++;
                }
            }
        }
        return ans;
    }
better:o(nlogn),o(1)
 int getPairsCount(int arr[], int n, int k) {
        sort(arr,arr+n);
        int ans =0;
        for(int i=0;i<n-1;i++){
            int x=k-arr[i];
           int t1=lower_bound(arr+i+1,arr+n,x)-arr;
           int t2=upper_bound(arr+i+1,arr+n,x)-arr;
           ans+=(t2-t1);
        }
        return ans;
    }
best:o(n),o(n)
 int getPairsCount(int arr[], int n, int k) {
        unordered_map<int,int>um;
        int ans =0;
        for(int i=0;i<n;i++){
           int x=k-arr[i];
           ans+=um[x];
           um[arr[i]]++;
        }
        return ans;
    }
sorted:o(n),o(1)
  int getPairsCount(int arr[], int n, int k) {
        sort(arr,arr+n);
        int ans =0;
        int i=0,j=n-1;
        while(i<j){
        if(arr[i]+arr[j]>k){
            j--;
        } else if(arr[i]+arr[j]==k){
            int t1=1,t2=1;
            while(arr[i]==arr[i+1]&&i+1<=j){
                t1++;
                i++;
            }
             while(arr[j]==arr[j-1]&&j-1>=i){
                t2++;
                j--;
            }
            ans+=(t1*t2);
            i++;
            j--;
        } else {
            i++;
        }
        }
        return ans;
    }

