METHOD:1 O(n),O(n)
#include<unordered_map>
class Solution{   
public:
    int getPairsCount(int arr[], int n, int k) {
        int c=0;
        unordered_map<int,int>um;
        for(int i=0;i<n;i++){
            if(um.count(k-arr[i])){
                c+=um[k-arr[i]];
            }
            um[arr[i]]++;
        }
        return c;
    }
};
METHOD:2 O(nlogn),O(1)
int pairSum(int *arr, int n, int num)
{
         int c=0;
       sort(arr,arr+n);
      int i=0;
      int j=n-1;
    if(arr[i]==arr[j]&&arr[i]+arr[j]==num){
        return (n*(n-1))/2;
    }
      while(i<j){
          if(arr[i]+arr[j]<num)
          i++;
          else if(arr[i]+arr[j]>num)
          j--;
          else{
              int c1=1,c2=1;
              while(arr[i]==arr[i+1]&&i+1<=j)
                  {
                     i++;
              c1++;
              }
              
              while(arr[j]==arr[j-1]&&j-1>=i){
                     j--;
              c2++;
              }
                  i++;
                  j--;
          c+=c1*c2;
      }
    }
   return c; 
    }
