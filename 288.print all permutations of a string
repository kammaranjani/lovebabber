Method:backtracking
   void help(string s, vector<string>&ans, int l, int r){
	       if(l==r){
	           ans.push_back(s);
	           return;
	       }
          for(int i=l;i<=r;i++){
              swap(s[l],s[i]);
              help(s,ans,l+1,r);
              swap(s[l],s[i]);
          }
	    }
		vector<string>find_permutation(string S)
		{
		    vector<string>ans;
		    int sn = S.size();
		    help(S,ans,0,sn-1);
		    vector<string>ans1;
		    unordered_map<string,bool>um;
		    int n=ans.size();
		    for(int i=0;i<n;i++){
		        um[ans[i]]=1;
		    }
		    for(auto t:um){
		        ans1.push_back(t.first);
		    }
		    return ans1;
		}
  Method 2: recursion
      void help(string s, vector<string>&ans){
	        if(s.size()==1){
	            ans.push_back(s);
	            return;
	        }
	        help(s.substr(1),ans);
	        int n= ans.size();
	        for(int j=0;j<n;j++){
	        for(int i=0;i<ans[j].size();i++){
	            string t1= ans[j].substr(0,i+1);
	            string t2= ans[j].substr(i+1,ans[j].size());
	            ans.push_back(t1+s[0]+t2);
	        }
	    }
	    for(int j=0;j<n;j++){
	        ans[j]=s[0]+ans[j];
	    }
	    }
		vector<string>find_permutation(string S)
		{
		    vector<string>ans;
		    help(S,ans);
		    vector<string>ans1;
		    unordered_map<string,bool>um;
		    int n=ans.size();
		    for(int i=0;i<n;i++){
		        um[ans[i]]=1;
		    }
		    for(auto t:um){
		        ans1.push_back(t.first);
		    }
		    return ans1;
		}
