basic:
int help(int n, int x, int y, int z,vector<int>&dp){
        if(n<0){
            return INT_MIN;
        }
        if(n==0){
            return 0;
        }
        if(dp[n]!=-1){
            return dp[n];
        }
        int a=max(help(n-x,x,y,z,dp),max(help(n-y,x,y,z,dp),help(n-z,x,y,z,dp)));
        dp[n]=1+a;
        return dp[n];
    }
    int maximizeTheCuts(int n, int x, int y, int z)
    {
        vector<int>dp(n+1,-1);
        int a= help(n,x,y,z,dp);
        if(a<0){
            return 0;
        } else {
            return a;
        }
    } 
best:o(n),o(n)
  int maximizeTheCuts(int n, int x, int y, int z)
    {
        vector<int>dp(n+1,INT_MIN);
        dp[0]=0;
        for(int i=1;i<=n;i++){
            if((i-x)>=0){
            dp[i]=1+dp[i-x];
            }
            if((i-y)>=0){
                dp[i]=max(dp[i],1+dp[i-y]);
            }
            if((i-z)>=0) {
                dp[i]=max(dp[i],1+dp[i-z]);
            }
        }
        return dp[n]>=0?dp[n]:0;
    }
