 METHOD 1:O(n),O(n)
#include<unordered_map>
    int countOccurence(int arr[], int n, int k) {
        unordered_map<int,int>um;
        int c=0;
        for(int i=0;i<n;i++){
            um[arr[i]]++;
        }
         for(int i=0;i<n;i++){
             if(um[arr[i]]>(n/k)){
             c++;
             um[arr[i]]=0;
             }
        }
        return c;
    }
bruteforce:O(n^2)
check each elements count and if it's greater than n/k return that element
better:O(nlogn)
sort
then check count
//METHOD 2: O(N),O(N)
Method 1:
#include <iostream>
using namespace std;
#include <unordered_map>
#include <climits>
int main() {
	int n;
	cin>>n;
	int arr[n];
	unordered_map<int,int> um;
	for(int i=0;i<n;i++){
	    cin>>arr[i];
	     um[arr[i]]++; 
	}
	int k;
	cin>>k;
	//int ma=INT_MIN;
	    for(int i=0;i<n;i++){
	      if(um.count(arr[i])>0){
	          if(um[arr[i]]>(n/k))
	          cout<<arr[i]<<" ";
	      }
	      um.erase(arr[i]);
	    }
	    cout<<endl;
	    //for()
	return 0;
}
method 3 in this see:https://www.geeksforgeeks.org/given-an-array-of-of-size-n-finds-all-the-elements-that-appear-more-than-nk-times/