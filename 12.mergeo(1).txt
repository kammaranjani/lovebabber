METHOD 1:O(n*mlogm),O(1), best
void merge(int arr1[], int arr2[], int n, int m) {
	    int i=0;
while(arr1[n-1]>arr2[0]){
    if(arr1[i]>arr2[0])
    swap(arr1[i],arr2[0]);
    i++;
sort(arr2,arr2+m);
	}
	}
METHOD 2:O((n+m)log(n+m))
	void merge(int arr1[], int arr2[], int n, int m) {
	    int i=0,j=0,k=n-1;
	    while(i<=k&&j<=m-1){
	        if(arr1[i]<arr2[j])
	        i++;
	        else{
	            swap(arr2[j++],arr1[k--]);
	        }
	    }
	    sort(arr1,arr1+n);
	    sort(arr2,arr2+m);
	}
METHOD 3:O((n+m)log(n+m))(I done)
      void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            // code here 
            int i=0,j=0;
           while(i+j<n&&i<n&&j<m){
               if(arr1[i]<arr2[j]){
                   i++;
               }
               else if(arr1[i]>arr2[j]){
                   j++;
               }
               else{
                  i++;
                  if(i+j<n){
                      j++;
                  }
               }
           }
             for(int e=n-1,k=0;e>=i&&k<m;e--,k++){
                 int t=arr2[k];
                 arr2[k]=arr1[e];
                 arr1[e]=t;
             }
     sort(arr1,arr1+n);
     sort(arr2,arr2+m);
        }