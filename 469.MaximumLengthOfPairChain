Method:recursive, memoization
bool comp(pair<int,int>a, pair<int,int>b){
    return a.second<b.second;
}
class Solution {
public:
unordered_map<string,int>um;
int help(pair<int, int>p[], int n, int s,int l){
    if(s==n)
    return 0;
    string st=to_string(s)+"*"+to_string(l);
    if(um.find(st)!=um.end())
    return um[st];
    if(p[s].first>l){
    return um[st]=max(1+help(p,n,s+1,p[s].second),help(p,n,s+1,l));
    }
    return um[st]=help(p,n,s+1,l);
}
    int findLongestChain(vector<vector<int>>& pairs) {
        int n=pairs.size();
        pair<int,int> p[n];
        for(int i=0;i<n;i++){
            p[i].first=pairs[i][0];
            p[i].second=pairs[i][1];
        }
        sort(p,p+n,comp);
        um.clear();
        return help(p,n,0,INT_MIN);
    }
Method:iterative o(nlogn), o(n)
bool comp(pair<int,int>a, pair<int,int>b){
    return a.second<b.second;
}
int findLongestChain(vector<vector<int>>& pairs) {
        int n=pairs.size();
        pair<int,int> p[n];
        for(int i=0;i<n;i++){
            p[i].first=pairs[i][0];
            p[i].second=pairs[i][1];
        }
        sort(p,p+n,comp);
        int ans=1;
        int ll=p[0].second;
        for(int i=1;i<n;i++){
            if(ll<p[i].first){
                ans++;
                ll=p[i].second;
            }
        }
        return ans;
    }
