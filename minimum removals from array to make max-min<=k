basic:
 int help(vector<int>arr, int i, int n, int k) {
        if(i>=n||arr[n]-arr[i]<=k){
            return 0;
        }
        return min(help(arr,i+1,n,k),help(arr,i,n-1,k))+1;
    }
    int removals(vector<int>& arr, int k){
        int n= arr.size();
        sort(arr.begin(),arr.end());
        return help(arr, 0, n-1, k);
    }
best: o(n^2),o(n^2)
    int removals(vector<int>& arr, int k){
        int n= arr.size();
        sort(arr.begin(),arr.end());
        vector<vector<int>>dp(n,vector<int>(n,0));
        int l=1;
        while(l<n){
            for(int i=n-1;i>=0;i--){
                int j=i+l;
                if(j<n){
                    if(arr[j]-arr[i]<=k){
                        dp[i][j]=0;
                    } else {
                    dp[i][j]=min(dp[i+1][j],dp[i][j-1])+1;
                    }
                }
            }
            l++;
        }
        return dp[0][n-1];
    }
