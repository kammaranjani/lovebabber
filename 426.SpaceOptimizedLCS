Method: DP O(N^2), O(N^2)
    int lcs(int x, int y, string s1, string s2)
    {
        int m=s1.size();
        int n=s2.size();
        vector<vector<int>>dp(m+1,vector<int>(n+1,0));
            for(int j=1;j<=n;j++){
        for(int i=1;i<=m;i++){
          if(s1[i-1]==s2[j-1]){
                dp[i][j]=max(dp[i][j],1+dp[i-1][j-1]);
            }else{
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);   
                }
        }
    }
    return dp[m][n];
    }
Method: DP O(n^2), o(2n)
int lcs(int x, int y, string s1, string s2)
    {
        vector<int>prev(y+1,0),cur(y+1,0);
        for(int i=1;i<=x;i++){
            for(int j=1;j<=y;j++){
                if(s1[i-1]==s2[j-1]){
                cur[j]=1+prev[j-1];
                }else{
                cur[j]=max(prev[j],cur[j-1]);
            }
        }
        prev=cur;
    }
    return prev[y];
    }
