Method:Recursive, memoization 0(n^3) //LEETCODE
#include <iostream>
#include <cstdlib>
#include<unordered_map>
using namespace std;
unordered_map<string,bool>u;
bool is(string s1, string s2, string s3,int l1,int l2,int l3, int p1, int p2, int p3){
 if(p1==l1&&p2==l2&&p3==l3)
        return true;
 string key=to_string(p1)+"!"+to_string(p2)+"!"+to_string(p3);
 if(u.find(key)!=u.end())
 return u[key];
    if(p2==l2){
    u[key]=((s1[p1]==s3[p3])?is(s1,s2,s3,l1,l2,l3,p1+1,p2,p3+1):false);
    return u[key];
    }
    if(p1==l1){
    u[key]=((s2[p2]==s3[p3])?is(s1,s2,s3,l1,l2,l3,p1,p2+1,p3+1):false);
    return u[key];
    }
    bool a=false,b=false;
    if(s1[p1]==s3[p3]){
     a=is(s1,s2,s3,l1,l2,l3,p1+1,p2,p3+1);
    }
     if(s2[p2]==s3[p3]){
     b=is(s1,s2,s3,l1,l2,l3,p1,p2+1,p3+1);
    }
    return u[key]=a or b;
    }

    bool isInterleave(string s1, string s2, string s3) {
       if(s3.size()!=s1.size()+s2.size())
       return false;
       u.clear();
       return is(s1,s2,s3,s1.size(),s2.size(),s3.size(),0,0,0);
    }
    Method: DP O(N*M), O(N*M)
     bool isInterleave(string A, string B, string C) 
    {
        //Your code here
        int m=A.size(),n=B.size(),l=C.size();
        if(m+n!=l)
        return 0;
        vector<vector<int>>dp(m+1,vector<int>(n+1,0));
        for(int i=0;i<=m;i++){
            for(int j=0;j<=n;j++){
                if(i==0&&j==0){
                dp[i][j]=1;
                continue;
                }
                if(i==0){
                if(B[j-1]==C[j-1]){
                    dp[i][j]=dp[i][j-1];
                }
                }
                else if(j==0){
                if(A[i-1]==C[i-1]){
                    dp[i][j]=dp[i-1][j];
                }
                }
                else {
                    if(A[i-1]==C[i+j-1]&&B[j-1]!=C[i+j-1]){
                        dp[i][j]=dp[i-1][j];
                    }
                    else if(A[i-1]!=C[i+j-1]&&B[j-1]==C[i+j-1]){
                        dp[i][j]=dp[i][j-1];
                    }
                    else if (A[i - 1] == C[i + j - 1]&& B[j - 1] == C[i + j - 1]){
                        dp[i][j]=dp[i-1][j]||dp[i][j-1];
                    }
                }
            }
        }
        return dp[m][n];
    }
