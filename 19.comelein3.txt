METHOD 1: O(n1+n2+n3),O(1)    //best
       vector <int> commonElements (int A[], int B[], int C[], int n1, int n2, int n3)
        {
            vector<int> v;
            int i=0,j=0,k=0;
            while(i<n1&&j<n2&&k<n3){
                if(A[i]==B[j]&&B[j]==C[k]){
                    v.push_back(A[i]);
                    k++;
                    j++;
                    i++;
                }
                else if(A[i]<B[j]){
                    i++;
                }
            else if(B[j]<C[k])
            {
                j++;
            }
            else
            k++;
                int x=A[i-1];
                while(A[i]==x)
                i++;
                int y=B[j-1];
                while(B[j]==y)
                j++;
                int z=C[k-1];
                while(C[k]==z)
                k++;
            }
            return v;
        }
METHOD 2:O(n1+n2+n3),O(n1+n2+n3)
  #include<unordered_map>
       vector <int> commonElements (int A[], int B[], int C[], int n1, int n2, int n3)
        {
         vector<int>v;
         unordered_map<int,int>m1;
         unordered_map<int,int>m2;
         unordered_map<int,int>m3;
         for(int i=0;i<n1;i++)
         m1[A[i]]++;
         for(int i=0;i<n2;i++)
         m2[B[i]]++;
         for(int i=0;i<n3;i++)
         m3[C[i]]++;
         for(int i=0;i<n1;i++){
             if(m1[A[i]]&&m2[A[i]]&&m3[A[i]]){
             v.push_back(A[i]);
             m1[A[i]]=0;
             }
         }
            return v;
        }