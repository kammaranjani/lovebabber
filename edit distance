basic:o(n*m),o(n*m)+o(n)
   int help(int n, string s, int m, string t,vector<vector<int>>&dp){
        if(n<0) return m+1;
        if(m<0) return n+1;
        if(dp[n][m]!=-1){
            return dp[n][m];
        }
        if(s[n]==t[m]){
            return dp[n][m]=help(n-1,s,m-1,t,dp);
        }
            return dp[n][m]=1+min(help(n,s,m-1,t,dp),min(help(n-1,s,m,t,dp),help(n-1,s,m-1,t,dp)));
    }
    int editDistance(string s, string t) {
        int n=s.size(),m=t.size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
    return help(n-1,s,m-1,t,dp);
    }
better:o(n*m),o(n*m)
int editDistance(string s, string t) {
        int n=s.size(),m=t.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int i=0;i<=n;i++){
            dp[i][0]=i;
        }
         for(int i=0;i<=m;i++){
            dp[0][i]=i;
        }
       for(int i=1;i<=n;i++){
           for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]){
            dp[i][j]=dp[i-1][j-1];
        } else{
            dp[i][j]=1+min(dp[i][j-1],min(dp[i-1][j],dp[i-1][j-1]));
           }
       }
    }
    return dp[n][m];
    }
best:o(n*m),o(m)
        int n=s.size(),m=t.size();
        vector<int>cur(m+1,0),prev(m+1,0);
         for(int i=0;i<=m;i++){
            prev[i]=i;
        }
       for(int i=1;i<=n;i++){
           cur[0]=i;
           for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]){
            cur[j]=prev[j-1];
        } else{
            cur[j]=1+min(cur[j-1],min(prev[j],prev[j-1]));
           }
       }
       prev=cur;
    }
    return prev[m];
    }
