bruteforce: o(n+m)+o(n+m),o(n+m)
void merge(int ar1[],int ar2[],int m, int n){
    int i=0,j=0;
    vector<int>a;
    while(i<m&&j<n){
        if(ar1[i]<=ar2[j]){
            a.push_back(ar1[i]);
            i++;
        } else {
            a.push_back(ar2[j]);
            j++;
        }
    }
    while(i<m){
        a.push_back(ar1[i]);
            i++;
    }
    while(j<n){
        a.push_back(ar2[j]);
            j++;
    }
    for(int i=0;i<n+m;i++){
        if(i<m){
        ar1[i]=a[i];
        } else {
            ar2[i-m]=a[i];
        }
    }
}
best1: min(o(n,m))+o(nlogn+mlogm),o(1)
void merge(int ar1[],int ar2[],int m, int n){
    int i=m-1,j=0;
    while(i>=0&&j<n){
      if(ar1[i]>ar2[j]){
          swap(ar1[i],ar2[j]);
          i--;
          j++;
      } else {
          break;
      }
    }
    sort(ar1,ar1+m);
    sort(ar2,ar2+n);
}
best2:o(log2(n+m)*o(n+m),o(1)
void swapmer(vector<long long>&ar1,vector<long long>&ar2,int i,int j){
    if(ar1[i]>ar2[j]){
        swap(ar1[i],ar2[j]);
    }
}
void mergeTwoSortedArraysWithoutExtraSpace(vector<long long> &a, vector<long long> &b){
	int m= a.size(),n=b.size();
	    int len= (n+m);
int gap = (len/2)+(len%2);
while(gap>0) {
int left = 0,right=left+gap;
while(right<len){
    if(left<m && right>=m) {
        swapmer(a,b,left,right-m);
    } else if(left>=m) {
        swapmer(b,b,left-m,right-m);
    } else if(left<m && right<m){
        swapmer(a,a,left,right);
    }
    left++;
    right++;
}
if(gap==1)
break;
gap = (gap/2) + (gap%2);
}
}
