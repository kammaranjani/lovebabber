Method:Recursive Memoization o(n^3), o(n^2)
int help(vector<int>&a, int s, int n,vector<vector<int>>&dp){
      if(s==n)
      return INT_MAX;
      if(dp[s][n]!=-1){
          return dp[s][n];
      }
      int ans=INT_MAX,t=0;
      for(int i=s;i<n;i++){
          t+=a[i];
          ans=min(ans,t);
      }
      return dp[s][n]=min(ans,min(help(a,s+1,n,dp), help(a,s,n-1,dp)));
  }
  int smallestSumSubarray(vector<int>& a){
      vector<vector<int>>dp(a.size()+1,vector<int>(a.size()+1,-1));
    return help(a,0,a.size(),dp);
  }
  Method:Dp o(n^2), o(n^2)
   int smallestSumSubarray(vector<int>& a){
     int n=a.size();
     vector<vector<int>>dp(n,vector<int>(n,0));
   int ans=INT_MAX;
   for(int i=0;i<n;i++){
       for(int j=i;j<n;j++){
           if(i==j){
               dp[i][j]=a[i];
               ans=min(ans,dp[i][j]);
           }else{
               dp[i][j]=dp[i][j-1]+a[j];
               ans=min(ans,dp[i][j]);
           }
       }
   }
   return ans;
  }
  Method: Dp (space optimized) o(n^2) o(n)
  int smallestSumSubarray(vector<int>& a){
     int n=a.size();
     vector<int>dp(n,0);
   int ans=INT_MAX;
   for(int i=0;i<n;i++){
       for(int j=i;j<n;j++){
           if(i==j){
               dp[i]=a[i];
               ans=min(ans,dp[j]);
           }else{
               dp[j]=dp[j-1]+a[j];
               ans=min(ans,dp[j]);
           }
       }
   }
   return ans;
  }
  Method:iterative o(n), o(1) (kadane's)
  int smallestSumSubarray(vector<int>& a){
   int n=a.size();
   int ans=INT_MIN,an=0;
   for(int i=0;i<n;i++){
       an+=a[i]*-1;
       ans=max(ans,an);
       if(an<0){
           an=0;
       }
   }
   return -1*ans;
  }
