Method:Recursion, Memoization O(n),O(n)
int help(vector<int>&a, int s, int n, vector<int>&dp){
      if(s>=n)
      return 0;
      if(n-s==1)
      return a[s];
      if(n-s==2)
      return a[s]+a[s+1];
      if(dp[s]!=-1)
      return dp[s];
      return dp[s]=max(help(a,s+1,n,dp),a[s]+max(a[s+1]+help(a,s+3,n,dp),help(a,s+2,n,dp)));
  }
  int findMaxSum(vector<int>& a){
      vector<int>dp(a.size()+1,-1);
      return help(a,0,a.size(),dp);
  }
  Method: DP O(N), O(N)
   int findMaxSum(vector<int>& a){
      vector<int>dp(a.size()+1,0);
      dp[1]=a[0];
      dp[2]=a[0]+a[1];
      for(int i=3;i<=a.size();i++){
          dp[i]=max(dp[i-1],max(a[i-1]+a[i-2]+dp[i-3],a[i-1]+dp[i-2]));
      }
      return dp[a.size()];
  }
