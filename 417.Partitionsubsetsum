 Method:DP O(N*s/2), O(N+1*s/2+1)
 int equalPartition(int N, int arr[])
    {
        int s=0;
        for(int i=0;i<N;i++){
            s+=arr[i];
        }
        if(s&1)  //if s is odd
        return 0;
        vector<vector<int>>dp(N+1,vector<int>((s/2)+1,0));
        for(int i=0;i<=N;i++){
            dp[i][0]=1;
        }
        for(int i=1;i<=N;i++){
            for(int j=1;j<=(s/2);j++){
                dp[i][j]=dp[i-1][j];
                if(j>=arr[i-1])
                dp[i][j]+=dp[i-1][j-arr[i-1]];
            }
        }
        return dp[N][s/2];
    }
Method: Recursive, Memoization
consider each element and not considering(2 choices just like in a knapsack problem)

//////////////////////////////////////////////////
recent ones:
basic:
int help(int i, int N, int arr[],int s1, int s2){
        if(i==N){
        if(s1==s2)
        return true;
        else
        return false;
        }
        return help(i+1,N,arr,s1+arr[i],s2)||help(i+1,N,arr,s1,s2+arr[i]);
}
    int equalPartition(int N, int arr[])
    {
        vector<vector<vector<int>>>dp(N,vector<vector<int>>())
       return help(0,N,arr,0,0);
    }
better:
int help(int i, int N, int arr[],int s,vector<vector<long long>>&dp){
    if(s<0){
        return 0;
    }
        if(i==N){
        if(s==0){
        return 1;
        }
        return 0;
        }
        if(dp[i][s]!=-1){
            return dp[i][s];
        }
        
        return help(i+1,N,arr,s-arr[i],dp)+help(i+1,N,arr,s,dp);
}
    int equalPartition(int N, int arr[])
    {
        int sum=0;
        for(int i=0;i<N;i++){
            sum+=arr[i];
        }
        if(sum%2!=0){
            return 0;
        }
        vector<vector<long long>>dp(N,vector<long long>((sum/2)+1,-1));
        int ans=help(0,N,arr,sum/2,dp);
        return ans;
    }
2nd better:
    int equalPartition(int N, int arr[])
    {
        int sum=0;
        for(int i=0;i<N;i++){
            sum+=arr[i];
        }
        if(sum%2!=0){
            return 0;
        }
        vector<vector<long long>>dp(N+1,vector<long long>((sum/2)+1,0));
        for(int i=N-1;i>=0;i--){
            for(int j=0;j<=(sum/2);j++){
                if(j==0){
                    dp[i][j]=1;
                    continue;
                }
                dp[i][j]=dp[i+1][j];
                if(j-arr[i]>=0)
                dp[i][j]+=dp[i+1][j-arr[i]];
            }
        }
        return dp[0][sum/2];
    }
best:o(n*sumofelements),o(sumofelements)
 int equalPartition(int N, int arr[])
    {
        int sum=0;
        for(int i=0;i<N;i++){
            sum+=arr[i];
        }
        if(sum%2!=0){
            return 0;
        }
        vector<long long>cur((sum/2)+1,0),prev((sum/2)+1,0);
        for(int i=N-1;i>=0;i--){
            for(int j=0;j<=(sum/2);j++){
                if(j==0){
                    cur[j]=1;
                    continue;
                }
                cur[j]=prev[j];
                if(j-arr[i]>=0)
                cur[j]+=prev[j-arr[i]];
            }
            prev=cur;
        }
        return cur[sum/2];
    }

