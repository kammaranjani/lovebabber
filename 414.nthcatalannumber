Method:Recursion(exponential time complexity)
 int numTrees(int n) {
        if(n==0||n==1)
        return 1;
        int ans=0;
        for(int i=0;i<n;i++){
        ans+=numTrees(i)*numTrees(n-i-1);
        }
     return ans;
    }
Method2:Dp O(n^2), O(n)
 int numTrees(int n) {
        int dp[n+1];
        for(int i=0;i<=n;i++){
            dp[i]=0;
        }
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<=n;i++){
            for(int j=0;j<i;j++){
            dp[i]+=dp[j]*dp[i-j-1];
            }
        }
     return dp[n];
    }
Method3:O(n), O(1)
 int numTrees(int n) {
        int k=min(n,2*n-n);
        unsigned long long int ans=1;
        for(int i=0;i<k;i++){
        ans=ans*(2*n-i);
        ans=ans/(i+1);
        }
        return ans/(n+1);
    }
