a[s][e]= (help(str,s+1,e)%m+(help(str,s,e-1))%m-(help(str,s+1,e-1))%m+m)%m;//this is how to use mod in best possible way
//good
Method:Recursive bruteforce
long long int m=1e9+7;
      bool pali(string o){
      for(int i=0,j=o.size()-1;i<j;i++,j--){
          if(o[i]!=o[j]){
              return false;
          }
      } 
      return true;
  } 
  long long int help(int s,string A,string o){
      long long int ans=0;
      if(s==A.size()){
      if(o.size()>0&&pali(o)){
        ans++;
      }
          return ans%m;
      }
      ans+=help(s+1,A,o+A.substr(s,1))%m+help(s+1,A,o)%m;
    return ans%m;
  }
    long long int  countPS(string str)
    {
            string o="";
    return help(0,str,o)%m;
    }
Method:Recursive memoization o(n^2), o(n^2)
long long int help(string str, int s, int e,vector<vector<long long int>>&dp){
        if(s>e)
        return 0;
        if(s==e)
        return 1;
        if(dp[s][e]!=-1){
            return dp[s][e];
        }
        if(str[s]==str[e]){
            return dp[s][e]=1+help(str,s+1,e,dp)+help(str,s,e-1,dp)%m;
        }
        return dp[s][e]=help(str,s+1,e,dp)%m+help(str,s,e-1,dp)%m-help(str,s+1,e-1,dp)%m;
    }
    long long int  countPS(string str)
    {
        int n=str.size();
        vector<vector<long long int>>dp(n+1,vector<long long int>(n+1,-1));
    return help(str,0,str.size()-1,dp)%m;    
    }
Method: DP o(n^2),o(n)//after space optimization
 int m=1e9+7;
    long long int countPS(string str)
    {
        int n=str.size();
        vector<vector<long long int>>a(n,vector<long long int>(n,0));
        long long int ans=0;
        int k=0;
        while(k<n){
        for(int i=0;i<n;i++){
            int j=i+k;
             if(i==j){
             a[i][j]=1;
             }
             else{
                 if(str[i]==str[j])
                 a[i][j]=1+a[i+1][j]+a[i][j-1];
                 else{
                     long long int s=0;
                     if(i+1<=j-1)
                     s=a[i+1][j-1]%m;
                     a[i][j]=a[i+1][j]%m+a[i][j-1]%m-s;
                     
                 }
             }
             ans=max(ans,a[i][j])%m;
            }
            k++;
        }
        return ans;
    }
