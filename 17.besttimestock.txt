method 1: O(N),O(1)
int maxProfit(vector<int>& prices) {
        int ind=prices[0]; 
    int maxi=0;
    int i=1;
   while(i<prices.size()){
       if(prices[i]<ind){
           ind=prices[i];
       }
       else{
           maxi=max(maxi,prices[i]-ind);
       }
       i++;
   }
    return maxi;
    }
Method 2:O(N),O(N)
   int maxProfit(vector<int>& prices) {
        int ind=prices[0]; 
    int maxi=0;
    int n=prices.size();
    int arr[n];
    arr[n-1]=prices[n-1];
    for(int j=n-2;j>=0;j--){
        arr[j]=max(arr[j+1],prices[j]);
    }
    for(int i=0;i<n-1;i++){
        maxi=max(maxi,arr[i]-prices[i]);
    }
    return maxi;
    }
bruteforce:O(N^2),O(1)
i from o to n-1
j=i+1 to n
take max(of differences)
int help(int *arr, int n){
  int maxi=0;
    for(int i=0;i<n-1;i++)
  {
    for(int j=i+1;j<n;j++){
        if(arr[j]>arr[i])
        maxi=max(maxi,arr[j]-arr[i]);
        }
    }
    return maxi;
}
