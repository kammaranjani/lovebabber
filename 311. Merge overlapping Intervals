better: o(2n),o(n) (unnecessary)
 vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end(),compareInt);
        vector<vector<int>>ans;
        int n= intervals.size();
        for(int i=0;i<n;i++){
        int start = intervals[i][0];
        int end = intervals[i][1];
        if(!ans.empty() && end<=ans.back()[1])
        continue;
            for(int j=i+1;j<n;j++){
                if(intervals[j][0]<=end){
                    end = max(end,intervals[j][1]); 
            }else {
                break;
            }
        }
            vector<int>t;
            t.push_back(start);
            t.push_back(end);
            ans.push_back(t);
        }
        return ans;
    }
best: o(n),o(1)
 bool compareInt(vector<int>a, vector<int>b) {
        if(a[0]!=b[0]){
            return a[0]<b[0];
        } else {
        return a[1]<b[1];
        }
    }
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end(),compareInt);
        vector<vector<int>>ans;
        int n= intervals.size();
        ans.push_back(intervals[0]);
        for(int i=1;i<n;i++){
        if(!ans.empty() && intervals[i][1]<=ans.back()[1])
        continue;
        if(intervals[i][0]<=ans.back()[1]){
        ans.back()[1] = max(ans.back()[1],intervals[i][1]); 
            }else {
            ans.push_back(intervals[i]);
        }
        }
        return ans;
    }
};
